(library (nmosh applet test-stress-udp)
         (export test-stress-udp)
         (import (rnrs)
                 (yuni core)
                 (yuni async)
                 (nmosh aio impl win32 socket-ops)
                 (nmosh io core)
                 (nmosh io master-queue)
                 )

(define Q nmosh-io-master-queue)

(define in-flight 0)
(define max-in-flight 5)
(define count 0)
(define count-prev 0)

(define (init)
  (define sender #f)
  (define tgt #f)
  (define tgt-name #f)
  (define (recv err bv name-bv)
    (unless (and (number? err) (= err 0))
      (write (list 'RECV-ERR! err))(newline)
      (exit -1))
    (set! in-flight (- in-flight 1))
    (kick)
    (set! count (+ count 1))
    (when (= 1024 (- count count-prev))
      (set! count-prev count)
      (display (list 'COUNT: count 'IN-FLIGHT: in-flight))(newline)))
  (define (kick)
    (seq
      (set! in-flight (+ 1 in-flight))
      (unless (= in-flight max-in-flight)
        (kick))
      (=> sender (make-bytevector 1024) tgt-name => err)
      (unless (and (number? err) (= 0 err))
        (write (list 'SEND-ERR! err))(newline)
        (exit -1))))
  (seq
    (=> resolve-socketname-udp/4 Q "localhost" 9999 => l)
    (set! tgt (car l))
    (set! tgt-name (~ tgt 'sockaddr))
    ;; Make server/client
    (let ((Xsender (queue-make-udp0 Q tgt recv 4096)))
      (set! sender Xsender) 
      (kick))))

(define (mainloop)
  (io-dispatch-loop))

(define (test-stress-udp)
  (init)
  (mainloop))
)
