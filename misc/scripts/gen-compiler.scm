(import (rnrs)
        (only (srfi :1) first second third fourth)
        (srfi :48)
        (match)
        (yuni util files)
        (mosh control)
        (mosh pp))

(define (map-with-index1 proc lis)
  (define (itr count rest)
    (if (pair? rest)
      (cons (proc count (car rest))
            (itr (+ 1 count) (cdr rest)))
      '()))
  (itr 0 lis))

(define (errorf fmt . args)
  (apply format fmt args)
  (exit -1))

(define (extract-quasiquote-vector obj)
  (match obj
  (('define (name . args) ('quasiquote #(pat ...)))
   `(define (,name ,@args)
      (let1 v (make-vector ,(length pat))
        ,@(map-with-index1
           (lambda (i x)
             `(vector-set! v ,i ,(if (pair? x) (second x) x)))
           pat)
        v)))
  (else
   obj)))

(define (write-cond-expand body)
  (for-each
   (lambda (x)
     (match x
       [('include file-name)
        (for-each write (file->sexp-list file-name))(newline) ]
       [else (write x)(newline)]))
   body))

(define (main args)
  (format #t ";; Do not edit this file generated by ~a.\n" (first args))
  (with-output-to-file (fourth args)
                       (lambda ()
  (with-input-from-file (second args)
    (lambda ()
      (let loop ([obj (read)])
        (cond
         [(eof-object? obj) '()]
         [else
          (match obj
            [('cond-expand . body)
             (aif (find (lambda (x) (eq? (car x) (string->symbol (third args)))) body)
                  (write-cond-expand (cdr it))
                  (aif (find (lambda (x) (eq? (car x) 'else)) body)
                       (write-cond-expand (cdr it))
                       (errorf "condition? ~a not found " (third args))))]
            [else (pp (extract-quasiquote-vector obj)) (newline)])
          (loop (read))])))))) 
  0)

(main (command-line))
